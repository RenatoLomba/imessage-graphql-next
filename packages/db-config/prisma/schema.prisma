generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String                    @id @default(cuid())
  name           String?
  email          String?                   @unique
  username       String?                   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  participatesAt ConversationParticipant[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id              String                    @id @default(cuid())
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  participants    ConversationParticipant[]
  latestMessage   Message?                  @relation(fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  latestMessageId String?                   @unique
}

model ConversationParticipant {
  id                   String       @id @default(cuid())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  user                 User         @relation(fields: [userId], references: [id])
  userId               String
  conversation         Conversation @relation(fields: [conversationId], references: [id])
  conversationId       String
  messages             Message[]
  hasSeenLatestMessage Boolean      @default(false)
}

model Message {
  id              String                  @id @default(cuid())
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  participant     ConversationParticipant @relation(fields: [participantId], references: [id])
  participantId   String
  text            String                  @db.Text
  latestMessageAt Conversation?
}
